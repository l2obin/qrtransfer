{"version":3,"sources":["common/SimpleBottomNavigation.tsx","receiver/Receiver.tsx","home/Home.tsx","common/QRScanner/QRScanner.tsx","sender/Sender.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","position","bottom","SimpleBottomNavigation","history","useHistory","React","useState","value","setValue","classes","BottomNavigation","onChange","event","newValue","push","showLabels","className","BottomNavigationAction","label","icon","CameraFacingModes","Home","Container","maxWidth","Component","QRScanner","video","createRef","canvas","isStreamInit","constraints","audio","facingMode","decoder","Worker","last_scanned_raw","Date","getTime","last_scanned_at","debounce_timeout","a","this","onmessage","msg","onDecoderMessage","navigator","mediaDevices","getUserMedia","stream","handleSuccess","handleError","setTimeout","attemptQRDecode","current","canvas_context","getContext","videoWidth","height","videoHeight","drawImage","imgData","getImageData","data","postMessage","err","name","console","log","qrid","right_now","now","alert","srcObject","error","message","playsInline","autoPlay","ref","id","Receiver","Box","Sender","nextPacket","state","current_packet_number","total_number_of_packets","setState","current_packet_data","getCurrentPacket","each_packet_size","length","totalNumberOfPackets","Math","ceil","packetSize","currentPacketNumber","substr","prepare","setInterval","tick","Button","variant","color","alignItems","style","backgroundColor","padding","renderAs","App","prefersDarkMode","useMediaQuery","theme","useMemo","createMuiTheme","palette","type","ThemeProvider","CssBaseline","path","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c023ca6f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n    position: 'fixed',\r\n    bottom: 0,\r\n  },\r\n});\r\n\r\nexport default function SimpleBottomNavigation() {\r\n  const history = useHistory();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <BottomNavigation\r\n      value={value}\r\n      onChange={(event, newValue) => {\r\n        history.push(newValue);\r\n        setValue(newValue);\r\n      }}\r\n      showLabels\r\n      className={classes.root}\r\n    >\r\n      <BottomNavigationAction label=\"Home\" value='/' icon={<HomeIcon />} />\r\n      <BottomNavigationAction label=\"Send\" value='/send' icon={<PublishIcon />} />\r\n      <BottomNavigationAction label=\"Receive\" value='/receive' icon={<GetAppIcon />} />\r\n    </BottomNavigation>\r\n  );\r\n}","import React, { MutableRefObject } from 'react';\r\nimport './Receiver.css';\r\n\r\nimport Webcam from \"react-webcam\";\r\n\r\nimport { Box, Button, Container } from '@material-ui/core';\r\nimport QRScanner from '../common/QRScanner/QRScanner';\r\n\r\ntype ReceiverState = {\r\n  videoConstraints?: MediaStreamConstraints[\"video\"],\r\n  currentFacingMode: CameraFacingModes,\r\n}\r\n\r\nenum CameraFacingModes {\r\n  USER = 'user',\r\n  ENVIRONMENT = 'environment'\r\n}\r\n\r\nclass Receiver extends React.Component<{}, ReceiverState> {\r\n\r\n  // webcamRef?: MutableRefObject<Webcam>;\r\n\r\n  // constructor() {\r\n  //   super({});\r\n\r\n  //   const defaultFacingMode = CameraFacingModes.ENVIRONMENT;\r\n\r\n  //   this.state = {\r\n  //     currentFacingMode: defaultFacingMode,\r\n  //     videoConstraints: {\r\n  //       facingMode: defaultFacingMode\r\n  //     },\r\n  //   };\r\n\r\n  //   this.toggleCamera = this.toggleCamera.bind(this);\r\n  // }\r\n\r\n  // toggleCamera() {\r\n  //   const toggledFacingMode = (this.state.currentFacingMode === CameraFacingModes.USER ) ? CameraFacingModes.ENVIRONMENT : CameraFacingModes.USER;\r\n    \r\n  //   this.setState({\r\n  //     videoConstraints: { facingMode: toggledFacingMode },\r\n  //     currentFacingMode: toggledFacingMode,\r\n  //   });\r\n  // }\r\n\r\n  // receive() {\r\n  //   if (this.webcamRef) {\r\n  //     const imageSrc = this.webcamRef.current.getScreenshot();\r\n  //     console.log('imageSrc', imageSrc);\r\n  //   }\r\n  // }\r\n\r\n  render() {    \r\n    return <Container maxWidth=\"sm\">\r\n      <h3>Receive</h3>\r\n      <Box>\r\n        {/* <Webcam \r\n          videoConstraints={this.state.videoConstraints}\r\n          ref={this.webcamRef}\r\n          style={{width: '70vmin', height: '70vmin'}}\r\n        /> */}\r\n        <QRScanner />\r\n      </Box>\r\n      {/* <Button variant=\"contained\" color=\"primary\" onClick={this.toggleCamera} >Toggle Camera</Button> */}\r\n      {/* <Button variant=\"contained\" color=\"primary\" onClick={this.receive} >Receive</Button> */}\r\n    </Container>;\r\n  }\r\n}\r\n\r\nexport default Receiver;","import { Container } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return <Container maxWidth=\"sm\">\r\n      <h3>Home</h3>\r\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n    </Container>;\r\n  }\r\n}\r\n\r\nexport default Home;","import { Component, createRef } from \"react\"\r\nimport './QRScanner.css';\r\n\r\ntype QRScannerProps = {}\r\n\r\ntype QRScannerState = {\r\n  decoded_string: ''\r\n}\r\n\r\nclass QRScanner extends Component<QRScannerProps, QRScannerState> {\r\n\r\n  video = createRef<HTMLVideoElement>();\r\n  canvas = createRef<HTMLCanvasElement>();\r\n\r\n  isStreamInit = false;\r\n  constraints = {\r\n    audio: false,\r\n    video: {\r\n      facingMode: 'environment'\r\n    }\r\n  };\r\n\r\n  // quirc wasm\r\n  decoder = new Worker('./lib/quirc/quirc-worker.js');\r\n  last_scanned_raw = new Date().getTime();\r\n  last_scanned_at = new Date().getTime();\r\n\r\n  // In milliseconds\r\n  debounce_timeout = 750;\r\n\r\n  async componentDidMount() {\r\n    this.decoder.onmessage = (msg) => { this.onDecoderMessage(msg) };\r\n\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia(this.constraints);\r\n      this.handleSuccess(stream);\r\n    } catch (err) {\r\n      this.handleError(err);\r\n    }\r\n\r\n    setTimeout(() => { this.attemptQRDecode() }, this.debounce_timeout);\r\n  }\r\n\r\n  attemptQRDecode() {\r\n    if (this.isStreamInit)  {\r\n      try {\r\n        if (this.canvas === null || this.canvas.current === null) return;\r\n        if (this.video === null || this.video.current === null) return;\r\n\r\n        let canvas_context = this.canvas.current.getContext(\"2d\");\r\n        if (canvas_context === null) return;\r\n\r\n        this.canvas.current.width = this.video.current.videoWidth;\r\n        this.canvas.current.height = this.video.current.videoHeight;\r\n        canvas_context.drawImage(this.video.current, 0, 0, this.canvas.current.width, this.canvas.current.height);\r\n  \r\n        var imgData = canvas_context.getImageData(0, 0, this.canvas.current.width, this.canvas.current.height);\r\n  \r\n        if (imgData.data) {\r\n          this.decoder.postMessage(imgData);\r\n        }\r\n      } catch (err) {\r\n        if (err.name === 'NS_ERROR_NOT_AVAILABLE') setTimeout(() => { this.attemptQRDecode() }, 0);\r\n          console.log(\"Error\");\r\n          console.log(err);\r\n      }\r\n    }\r\n  }\r\n\r\n  onDecoderMessage(msg: any) {\r\n    if (msg.data !== 'done') {\r\n  \r\n      const qrid = msg.data['payload_string'];\r\n      const right_now = Date.now();\r\n  \r\n      if (qrid !== this.last_scanned_raw || this.last_scanned_at < right_now - this.debounce_timeout) {\r\n        this.last_scanned_raw = qrid;\r\n        this.last_scanned_at = right_now;\r\n  \r\n        alert(qrid);\r\n      } else if (qrid === this.last_scanned_raw) {\r\n        this.last_scanned_at = right_now;\r\n      }\r\n    }\r\n    setTimeout(() => { this.attemptQRDecode() }, 0);\r\n  }\r\n\r\n  handleSuccess(stream: any) {\r\n    if (this.video && this.video.current) {\r\n      this.video.current.srcObject = stream;\r\n      this.isStreamInit = true;\r\n    }\r\n  }\r\n\r\n  handleError(error: Error) {\r\n    console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"video-container\">\r\n          <video playsInline autoPlay ref={this.video}></video>\r\n        </div>\r\n        <canvas\r\n          id=\"qr-canvas\"\r\n          ref={this.canvas}\r\n          className=\"qrcode-canvas\"\r\n        >\r\n          \r\n        </canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QRScanner","import React from 'react';\r\nimport './Sender.css';\r\n\r\nimport { Button, Container, Box } from '@material-ui/core';\r\nimport QRCode from 'qrcode.react';\r\n\r\nconst EACH_PACKET_SIZE = 30;\r\n\r\ntype SenderState = {\r\n  each_packet_size: number,\r\n  data: string,\r\n\r\n  current_packet_number: number,\r\n  total_number_of_packets: number,\r\n  current_packet_data: string,\r\n}\r\n\r\nclass Sender extends React.Component<{}, SenderState> {\r\n\r\n  tick() {\r\n    let nextPacket = (this.state.current_packet_number + 1) % this.state.total_number_of_packets;\r\n    this.setState({\r\n      current_packet_number: nextPacket,\r\n      current_packet_data: this.getCurrentPacket(this.state.data, this.state.each_packet_size, nextPacket, this.state.total_number_of_packets),\r\n    });\r\n  }\r\n\r\n  prepare() {\r\n    if (this.state.data === null || this.state.data.length === 0) {\r\n      this.setState({\r\n        current_packet_number: 0,\r\n        total_number_of_packets: 0,\r\n        current_packet_data: ''\r\n      })\r\n      return;\r\n    }\r\n\r\n    const totalNumberOfPackets = Math.ceil(this.state.data.length / this.state.each_packet_size);\r\n    this.setState({\r\n      current_packet_number: 0,\r\n      total_number_of_packets: totalNumberOfPackets,\r\n      current_packet_data: this.getCurrentPacket(this.state.data, this.state.each_packet_size, 0, totalNumberOfPackets),\r\n    });\r\n  }\r\n\r\n  getCurrentPacket(data:string, packetSize: number, currentPacketNumber: number, totalNumberOfPackets: number) {\r\n    return (currentPacketNumber+1) + '/' + totalNumberOfPackets + \"|\" + data.substr(currentPacketNumber * packetSize, packetSize);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      data: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\r\n      each_packet_size: EACH_PACKET_SIZE,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.prepare();\r\n    setInterval(() => this.tick(), 200);\r\n  }\r\n\r\n  render() {\r\n    return <Container maxWidth=\"sm\">\r\n      <h3>Send</h3>\r\n      \r\n      <Button variant=\"contained\" color=\"primary\">Send</Button>\r\n      <span>{this.state.current_packet_number+1}</span>/<span>{this.state.total_number_of_packets}</span>\r\n      <Box alignItems=\"center\" style={{backgroundColor: 'white', padding: 10, width: \"74vmin\", height: \"74vmin\"}}>\r\n        { this.state.current_packet_data != null ? <QRCode value={this.state.current_packet_data} renderAs='svg' style={{width: \"70vmin\", height: \"70vmin\"}} /> : null }\r\n      </Box>\r\n    </Container>;\r\n  }\r\n}\r\n\r\nexport default Sender;","import React from 'react';\nimport './App.css';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n/* material-ui */\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport SimpleBottomNavigation from './common/SimpleBottomNavigation';\nimport Home from './home/Home';\nimport Receiver from './receiver/Receiver';\nimport Sender from './sender/Sender';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <Router>\n        <Switch>\n          <Route path=\"/send\">\n            <Sender />\n          </Route>\n          <Route path=\"/receive\">\n            <Receiver />\n          </Route>\n          <Route>\n            <Home />\n          </Route>\n        </Switch>\n        <SimpleBottomNavigation />\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}